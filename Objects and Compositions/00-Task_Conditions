1. Calorie Object
Write a function that composes an object by given properties. The input comes as an array of strings.
Every even index of the array represents the name of the food. Every odd index is a number that is equal to the calories in 100 grams of the given product.
Assign each value to its corresponding property, and finally print the object.
The input comes as an array of string elements.
The output should be printed on the console.

2. Construction Crew
Write a program that receives a worker object as a parameter and modifies its properties. Workers have the following structure:
{

weight: Number,

experience: Number,

levelOfHydrated: Number,

dizziness: Boolean

}
Weight is expressed in kilograms, experience in years and levelOfHydrated is in milliliters. 
If you receive a worker whose dizziness property is set to true it means he needs to intake some water to be able to work correctly. 
The required amount is 0.1ml per kilogram per year of experience. The required amount must be added to the existing amount (to the levelOfHydrated). 
Once the water is administered, change the dizziness property to false.
Workers who do not have dizziness should not be modified in any way. Return them as they were.

Input
Your function will receive a valid object as a parameter.
Output
Return the same object that was passed in, modified as necessary.

3. Car Factory

Write a program that assembles a car by giving requirements out of existing components.
The client will place an order in the form of an object describing the car. You need to determine which parts to use to fulfill the client’s order.
You have the following parts in storage:
An engine has power (given in horsepower) and volume (given in cubic centimeters).
Both of these values are numbers. When selecting an engine, pick the smallest possible that still meets the requirements.

Small engine: { power: 90, volume: 1800 }
Normal engine: { power: 120, volume: 2400 }
Monster engine: { power: 200, volume: 3500 }

A carriage has a type and color. Both of these values are strings. You have two types of carriages in storage and can paint them any color.

Hatchback: { type: 'hatchback', color: <as required> }
Coupe: { type: 'coupe', color: <as required> }

The wheels will be represented by an array of 4 numbers, each number represents the diameter of the wheel in inches. 
The size can only be an odd number. Round down any requirements you receive to the nearest odd number.

Input
You will receive an object as an argument to your function. The format will be as follows:
{ model: <model name>,

power: <minimum power>,

color: <color>,

carriage: <carriage type>,

wheelsize: <size> }

Output
Return the resulting car object as a result of your function. See the examples for details.


4. Heroic Inventory

In the era of heroes, every hero has his items that make him unique.
Create a function that creates a register for the heroes, with their names, level, and items, if they have such.
The register should accept data in a specified format, and return it presented in a specified format.
Input

The input comes as an array of strings. Each element holds data for a hero, in the following format:
"{heroName} / {heroLevel} / {item1}, {item2}, {item3}..."
You must store the data about every hero. The name is a string, a level is a number and the items are all strings.

Output
The output is a JSON representation of the data for all the heroes you’ve stored.
The data must be an array of all the heroes. Check the examples for more info.



5. Lowest Prices in Cities

You will be given several towns, with products and their price. You need to find the lowest price for every product and the town it is sold at for that price.

Input

The input comes as an array of strings. Each element will hold data about a town, product, and its price at that town. 
The town and product will be strings, the price will be a number. The input will come in the following format:
{townName} | {productName} | {productPrice}

Output

As output, you must print each product with its lowest price and the town at which the product is sold at that price.
If two towns share the same lowest price, print the one that was entered first. The output, for every product, should be in the following format:

{productName} -> {productLowestPrice} ({townName})

The order of output in - order of entrance. See the examples for more info


6. Store Catalogue

You have to create a sorted catalog of store products. You will be given the products’ names and prices. You need to order them in alphabetical order.

Input

The input comes as an array of strings. Each element holds info about a product in the following format:
"{productName} : {productPrice}"

The product’s name will be a string, which will always start with a capital letter, and the price will be a number. 
There will be NO duplicate product input. The comparison for alphabetical order is case-insensitive.

Output

As output, you must print all the products in a specified format. They must be ordered exactly as specified above. 
The products must be divided into groups, by the initial of their name.
The group's initial should be printed, and after that, the products should be printed with 2 spaces before their names.
For more info check the examples.


7. Towns to JSON

You're tasked to create and print a JSON from a text table.
You will receive input as an array of strings, where each string represents a row of a table, with values on the row encompassed by pipes "|" and optionally spaces.
The table will consist of exactly 3 columns "Town", "Latitude" and "Longitude". The Latitude and Longitude columns will always contain valid numbers.
Check the examples to get a better understanding of your task.

Input

The input comes as an array of strings – the first string contains the table’s headings, each next string is a row from the table.

Output

· The output should be an array of objects wrapped in JSON.stringify().
· Latitude and Longitude must be parsed to numbers, and represented till the second digit after the decimal point!



8. Rectangle

Write a function that creates and returns a rectangle object.
The rectangle needs to have a width (Number), height (Number), and color (String) properties,
which are set via arguments during creation, and a calcArea() method, that calculates and returns the rectangle’s area.

Input

The function will receive three valid parameters – width (Number), height (Number), and color (String).

Output

Your function must return an object with all properties and methods as described.
The calcArea() method of the object should return a number. The first letter in the color must be upperCase().
