1. Rectangle

Write a class Rectangle for a rectangle object.
It needs to have a width (Number), height (Number), and color (String) properties,
which are set from the constructor, and a calcArea() method, that calculates and returns the rectangle’s area.

Input
The constructor function will receive valid parameters.

Output
The calcArea() method should return a number.
Submit the class definition as is, without wrapping it in any function.


2. Data Class

Write a class Request that holds data about an HTTP request. It has the following properties:
· method (String)
· uri (String)
· version (String)
· message (String)
· response (String)
· fulfilled (Boolean)

The first four properties (method, uri, version, message) are set through the constructor, in the listed order.
The response property is initialized to undefined and the fulfilled property is initially set to false.

Constraints
· The constructor of your class will receive valid parameters.
· Submit the class definition as is, without wrapping it in any function

3. Tickets

Write a program that manages a database of tickets. A ticket has a destination, a price, and a status.
Your program will receive two arguments - the first is an array of strings for ticket descriptions and the second is a string, representing a sorting criterion. 
The ticket descriptions have the following format:

<destinationName>|<price>|<status>

Store each ticket and at the end of execution return a sorted summary of all tickets, sorted by either destination, price, or status,
depending on the second parameter that your program received. Always sort in ascending order (the default behavior for alphabetical sort).
If two tickets compare the same, use order of appearance. See the examples for more information.

Input
Your program will receive two parameters - an array of strings and a single string.

Output
Return a sorted array of all the tickets that were registered.


6. Company

Write a class Company, which following these requirements:
The constructor takes no parameters:
You could initialize an object:
· departments - empty object

addEmployee({name}, {salary}, {position}, {department})
This function should add a new employee to the department with the given name.

· If one of the passed parameters is an empty string (""), undefined or null, this function should throw an error with the following message: "Invalid input!"
· If salary is less than 0, this function should throw an error with the following message: "Invalid input!"
· If the new employee is hired successfully, you should add him into the departments object with the current name of the department and return the following message: `New employee is hired. Name: {name}. Position: {position}`

bestDepartment()

This function should return the department with the highest average salary rounded to the second digit after the decimal point
and its employees sorted by their salary by descending order and by their name in ascending order as a second criterion:
`Best Department is: {best department's name}

Average salary: {best department's average salary}
{employee1} {salary} {position}
{employee2} {salary} {position}
{employee3} {salary} {position}

7. HEX

Write a class Hex, having the following functionality:

· The constructor takes one parameter value, which is a number
· valueOf() This function should return the value property of the hex class.
· toString() This function will show its hexadecimal value starting with "0x"
· plus({number}) This function should add a number or Hex object and return a new Hex object.
· minus({number}) This function should subtract a number or Hex object and return a new Hex object.
· parse({string}) Create a parse class method that can parse Hexadecimal numbers and convert them to standard decimal numbers.
