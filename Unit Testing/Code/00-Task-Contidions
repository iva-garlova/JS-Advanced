1. Request Validator

Write a function that validates an HTTP request object. The object has the properties method, uri, version, and message.
Your function will receive the object as a parameter and has to verify that each property meets the following requirements:

· method - can be GET, POST, DELETE or CONNECT
· uri - must be a valid resource address or an asterisk (*); a resource address is a combination of alphanumeric characters and periods; 
all letters are Latin; the URI cannot be an empty string
· version - can be HTTP/0.9, HTTP/1.0, HTTP/1.1 or HTTP/2.0 supplied as a string
· message - may contain any number of non-special characters (special characters are <, >, \, &, ', ")

If a request is valid, return it unchanged.
If any part fails the check, throw an Error with the message "Invalid request header: Invalid {Method/URI/Version/Message}".
Replace the part in curly braces with the relevant word. Note that some of the properties may be missing, in which case the request is invalid.
Check the properties in the order in which they are listed above. If more than one property is invalid, throw an error for the first encountered.

Input / Output
Your function will receive an object as a parameter. Return the same object or throw an Error as described above as an output.

2. Even or Odd

You need to write unit tests for a function isOddOrEven() that checks whether the length of a passed string is even or odd.
If the passed parameter is NOT a string return undefined. If the parameter is a string return either "even" or "odd" based on the length of the string.

JS Code
You are provided with an implementation of the isOddOrEven() function:

3. Char Lookup

Write unit tests for a function that retrieves a character at a given index from a passed-in string.
You are given a function named lookupChar(), which has the following functionality:
· lookupChar(string, index) - accepts a string and an integer (the index of the char we want to lookup) :
o If the first parameter is NOT a string or the second parameter is NOT a number - return undefined.
o If both parameters are of the correct type but the value of the index is incorrect (bigger than or equal to the string length or a negative number) 
- return "Incorrect index".
o If both parameters have correct types and values - return the character at the specified index in the string.

JS Code
You are provided with an implementation of the lookupChar() function:

4. Math Enforcer

Your task is to test an object named mathEnforcer, which should have the following functionality:
· addFive(num) - A function that accepts a single parameter:
o If the parameter is NOT a number, the function should return undefined.
o If the parameter is a number, add 5 to it, and return the result.
· subtractTen(num) - A function that accepts a single parameter:
o If the parameter is NOT a number, the function should return undefined.
o If the parameter is a number, subtract 10 from it, and return the result.
· sum(num1, num2) - A function that accepts two parameters:
o If any of the 2 parameters is NOT a number, the function should return undefined.
o If both parameters are numbers, the function should return their sum.

JS Code
You are provided with an implementation of the mathEnforcer object:
The methods should function correctly for positive, negative, and floating-point numbers. In the case of floating-point numbers, 
the result should be considered correct if it is within 0.01 of the correct value.

5. Notification

Write a JS function that receives a string message and displays it inside a div with id "notification.
The div starts hidden and when the function is called, reveal it. After the user clicks on it, hide the div.
In the example document, a notification is shown when you click on the button ["Get notified"].

6. Dynamic Validation

Write a JS function that dynamically validates an email input field when it is changed. If the input is invalid, apply to it the class "error".
Do not validate on every keystroke, as it is annoying for the user, consider only change events
A valid email will be in format: <name>@<domain>.<extension>
Only lowercase Latin characters are allowed for any of the parts of the email. If the input is valid, clear the style.

Input/Output
There will be no input/output, your program should instead modify the DOM of the given HTML document
